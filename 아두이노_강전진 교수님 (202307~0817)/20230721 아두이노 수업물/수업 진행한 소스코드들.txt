1)
int sensorValue = 0;
int outputValue = 0;

void setup() {
  Serial.begin(9600);
}

void loop() {
  sensorValue = analogRead(0);
  outputValue = map(sensorValue, 0, 1023, 0, 255);
  analogWrite(9, outputValue);
  Serial.print("sensor = ");
  Serial.print(sensorValue);
  Serial.print("\t output = ");
  Serial.println(outputValue);
  delay(100);
}






3)
// 필요한 라이브러리를 포함시킨다.
#include <Servo.h>

// 핀 번호를 정한다.
const int ledPin = 9; // LED를 연결한 핀 번호 (PWM 핀)
const int servoPin = 10; // 서보모터를 연결한 핀 번호
const int joyXPin = A0; // 조이스틱 X축 핀 번호
const int joyYPin = A1; // 조이스틱 Y축 핀 번호
const int joyButtonPin = 2; // 조이스틱 버튼을 연결한 핀 번호

// 서보 객체 생성
Servo servoMotor;

void setup() {
  // 핀 모드 설정
  pinMode(ledPin, OUTPUT);
  // 서보모터 연결 설정
  servoMotor.attach(servoPin);
  // 조이스틱 버튼을 입력 모드로 설정
  pinMode(joyButtonPin, INPUT_PULLUP);

  // 시리얼 통신 시작
  Serial.begin(9600);
}

void loop() {
  // 조이스틱 값 읽기 (X축과 Y축)
  int joyXValue = analogRead(joyXPin);
  int joyYValue = analogRead(joyYPin);

  // X축 값을 서보모터에 적용하여 각도로 변환 (0~180도로 제한)
  int servoAngle = map(joyXValue, 0, 1023, 0, 180);
  servoMotor.write(servoAngle);

  // Y축 값을 LED 밝기 (PWM)로 변환하여 적용 (0~255로 제한)
  int ledBrightness = map(joyYValue, 0, 1023, 0, 255);
  analogWrite(ledPin, ledBrightness);

  // 조이스틱 버튼 상태 확인
  bool buttonState = digitalRead(joyButtonPin);

  // 조이스틱 버튼이 눌렸을 때 LED를 켬
  if (buttonState == LOW) {
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }

  // 시리얼 모니터에 값을 출력하여 확인
  Serial.print("Joystick X Value: ");
  Serial.print(joyXValue);
  Serial.print(", Servo Angle: ");
  Serial.print(servoAngle);
  Serial.print(", Joystick Y Value: ");
  Serial.print(joyYValue);
  Serial.print(", LED Brightness: ");
  Serial.print(ledBrightness);
  Serial.print(", Joystick Button: ");
  Serial.println(buttonState);
  
  // 일시적인 딜레이 추가
  delay(100);
}


4) LCD
//YWROBOT
//Compatible with the Arduino IDE 1.0
//Library version:1.1
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x27 for a 16 chars and 2 line display

void setup()
{
  lcd.init();                      // initialize the lcd 
  lcd.init();
  // Print a message to the LCD.
  lcd.backlight();
  lcd.setCursor(0,0);   // 첫번째 줄의 0번째에서 시작
  lcd.print("SEO HYOUNG JONG!");
  lcd.setCursor(0,1); // 두번째 줄의 0번째에서 시작
  lcd.print("   1991 04 09   ");
}


void loop()
{
}


5) LCD - 2
//YWROBOT
//Compatible with the Arduino IDE 1.0
//Library version:1.1
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  // 헤더파일

LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x27 for a 16글자 짜리의 2줄 짜리 보드

char buf[10] = {0};
int ad_value = 0;

void setup()
{
  lcd.init();                      // initialize the lcd
  lcd.init();
  // Print a message to the LCD.
  lcd.backlight();
  lcd.setCursor(0,0); // 첫번째 줄
  lcd.print("Hello, world!");
  lcd.setCursor(0,1); // 두번째 줄
  lcd.print("Arduino UNO!");
 
  delay(1000); // 보여지는 시간
  lcd.clear(); // LCD 화면이 지워지면서 다시 보여짐

  lcd.setCursor(0,0);
  lcd.print("ADC VALUE");
  lcd.setCursor(0,1);
  lcd.print(buf);
}


void loop()
{
  ad_value = analogRead(A0);
  sprintf(buf, "%4d", ad_value); // 버F 안에 결과물을 담는다.
  lcd.setCursor(0,1);
  lcd.print(buf);
  delay(100);
}




6)
/*
 * Displays text sent over the serial port (e.g. from the Serial Monitor) on
 * an attached LCD.
 * YWROBOT
 *Compatible with the Arduino IDE 1.0
 *Library version:1.1
 */
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display

void setup()
{
  lcd.init();                      // initialize the lcd 
  lcd.backlight();
  Serial.begin(9600);
}

void loop()
{
  // when characters arrive over the serial port...
  if (Serial.available()) {
    // wait a bit for the entire message to arrive
    delay(100);
    // clear the screen
    lcd.clear();
    // read all the available characters
    while (Serial.available() > 0) {
      // display each character to the LCD
      lcd.write(Serial.read());
    }
  }
}

